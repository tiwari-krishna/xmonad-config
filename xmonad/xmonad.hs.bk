import XMonad
import Data.Monoid
import System.Exit
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig(additionalKeys)
import XMonad.Layout.NoBorders
import XMonad.Hooks.ManageHelpers
--import XMonad.Hooks.EwmhDesktops
import Graphics.X11.ExtraTypes.XF86
import XMonad.Layout.Fullscreen
import XMonad.Layout.NoBorders

import System.IO

import qualified XMonad.StackSet as W
import qualified Data.Map        as M

myTerminal      = "$TERMINAL"
myBrowser       = "$BROWSER"

myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True

myBorderWidth   = 2

myModMask       = mod4Mask

myWorkspaces    = ["α","β","γ","δ","ε","ζ","η","θ","ι"]

myNormalBorderColor  = "#141001"
myFocusedBorderColor = "#edeae1"

myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $
    [ ((modm,               xK_Return), spawn $ XMonad.terminal conf)
    , ((modm,               xK_space ), spawn "dmenu_run")
    , ((modm,               xK_q     ), kill)
    , ((modm,               xK_Tab ), sendMessage NextLayout)

    --  Reset the layouts on the current workspace to default
    , ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)

    -- Resize viewed windows to the correct size
    , ((modm,               xK_n     ), refresh)

    -- Move focus to the next window
    , ((modm,               xK_BackSpace   ), windows W.focusDown)

    , ((modm,               xK_j     ), windows W.focusDown)
    , ((modm,               xK_k     ), windows W.focusUp  )
    -- Move focus to the master window
    , ((mod1Mask,           xK_Return), windows W.focusMaster  )

    -- Swap the focused window and the master window
    , ((modm .|. controlMask,   xK_Return), windows W.swapMaster)
    , ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )
    , ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )

    , ((modm,               xK_h     ), sendMessage Shrink)
    , ((modm,               xK_l     ), sendMessage Expand)

    -- Push window back into tiling
    , ((modm,               xK_t     ), withFocused $ windows . W.sink)
    , ((modm              , xK_p ), sendMessage (IncMasterN 1))
    , ((modm              , xK_o), sendMessage (IncMasterN (-1)))

    , ((modm              , xK_b     ), sendMessage ToggleStruts)

    , ((modm .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))
    , ((modm .|. controlMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")

    -- Additional Keybindings (Apps specific)
    , ((mod1Mask .|. shiftMask, xK_space  ), spawn "mpc toggle")
    , ((mod1Mask .|. shiftMask, xK_Left  ), spawn "mpc prev")
    , ((modm .|. controlMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")
    , ((modm .|. controlMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")
    , ((modm .|. controlMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")
    , ((modm .|. controlMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")
    , ((modm .|. controlMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")
    , ((modm .|. controlMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")
    , ((modm .|. controlMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")
    , ((modm .|. controlMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")
    , ((modm .|. controlMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")
    , ((modm .|. controlMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")
    , ((modm .|. controlMask, xK_q     ), spawn "xmonad --recompile; xmonad --restart")


    ]
    ++

    [((m .|. modm, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
    ++

    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]


myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

    ]

-- Layouts:
myLayout = smartBorders $ fullscreenFull $ avoidStruts (tiled ||| Mirror tiled ||| Full)
  where
    tiled   = Tall nmaster delta ratio
    nmaster = 1
    ratio   = 1/2
    delta   = 3/100

-- Window rules:
myManageHook = composeAll
    [ className =? "MPlayer"        --> doFloat
    , className =? "Gimp"           --> doFloat
    , resource  =? "desktop_window" --> doIgnore
    , (isFullscreen --> doFullFloat)
    , resource  =? "kdesktop"       --> doIgnore ]

-- Event handling
--myEventHook = mempty

-- Status bars and logging
-- myLogHook = return ()

-- Startup hook
-- myStartupHook = return ()

-- Now run xmonad with all the defaults we set up.

main = do
   xmproc <- spawnPipe "xmobar $HOME/.config/xmobar/config"
   xmonad $ fullscreenSupport $ docks $ defaultConfig {
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

        keys               = myKeys,
        mouseBindings      = myMouseBindings,

        layoutHook         = myLayout,
        manageHook         = myManageHook <+> manageDocks <+> fullscreenManageHook,
        handleEventHook    = docksEventHook <+> fullscreenEventHook,
        --logHook            =  myLogHook,
        logHook = dynamicLogWithPP xmobarPP
                        { ppOutput = hPutStrLn xmproc
                        , ppTitle = xmobarColor "green" "" . shorten 50
                        }
        --startupHook        = myStartupHook
    }
